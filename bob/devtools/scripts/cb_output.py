#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
logger = logging.getLogger(__name__)

import click
from click.testing import CliRunner
import conda_build.api as cb

from . import bdt
from ..log import verbosity_option
from ..conda import should_skip_build


@click.command(context_settings=dict(
    ignore_unknown_options=True,
    allow_extra_args=True,
    ),
    epilog='''\b
Examples:
$ bdt cb-output conda_recipe_dir
$ bdt cb-output ../bob.conda/conda/kaldi -m ../bob.admin/gitlab/conda_build_config.yaml --python 3.6
'''
)
@click.argument('recipe_path')
@click.option('-m', '--variant-config-files', help='see conda build --help')
@click.option('--python', help='see conda build --help')
@verbosity_option()
@bdt.raise_on_error
def cb_output(recipe_path, variant_config_files, python):
  """Outputs name(s) of package(s) that would be generated by conda build.

  This command accepts extra unknown arguments so you can give it the same
  arguments that you would give to conda build.

  As of now, it only parses -m/--variant_config_files and --python and other
  arguments are ignored.
  """
  clirunner = CliRunner()
  with clirunner.isolation():
    # render
    config = cb.get_or_merge_config(
        None, variant_config_files=variant_config_files, python=python)
    metadata_tuples = cb.render(recipe_path, config=config)

    # check if build(s) should be skipped
    if should_skip_build(metadata_tuples):
      return 0

    paths = cb.get_output_file_paths(metadata_tuples, config=config)
  click.echo('\n'.join(sorted(paths)))
